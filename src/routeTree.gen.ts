/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestImport } from './routes/test'
import { Route as SelectionImport } from './routes/selection'
import { Route as ResultImport } from './routes/result'
import { Route as CustomizeImport } from './routes/customize'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const SelectionRoute = SelectionImport.update({
  id: '/selection',
  path: '/selection',
  getParentRoute: () => rootRoute,
} as any)

const ResultRoute = ResultImport.update({
  id: '/result',
  path: '/result',
  getParentRoute: () => rootRoute,
} as any)

const CustomizeRoute = CustomizeImport.update({
  id: '/customize',
  path: '/customize',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/customize': {
      id: '/customize'
      path: '/customize'
      fullPath: '/customize'
      preLoaderRoute: typeof CustomizeImport
      parentRoute: typeof rootRoute
    }
    '/result': {
      id: '/result'
      path: '/result'
      fullPath: '/result'
      preLoaderRoute: typeof ResultImport
      parentRoute: typeof rootRoute
    }
    '/selection': {
      id: '/selection'
      path: '/selection'
      fullPath: '/selection'
      preLoaderRoute: typeof SelectionImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/customize': typeof CustomizeRoute
  '/result': typeof ResultRoute
  '/selection': typeof SelectionRoute
  '/test': typeof TestRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/customize': typeof CustomizeRoute
  '/result': typeof ResultRoute
  '/selection': typeof SelectionRoute
  '/test': typeof TestRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/customize': typeof CustomizeRoute
  '/result': typeof ResultRoute
  '/selection': typeof SelectionRoute
  '/test': typeof TestRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/customize' | '/result' | '/selection' | '/test'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/customize' | '/result' | '/selection' | '/test'
  id: '__root__' | '/' | '/customize' | '/result' | '/selection' | '/test'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CustomizeRoute: typeof CustomizeRoute
  ResultRoute: typeof ResultRoute
  SelectionRoute: typeof SelectionRoute
  TestRoute: typeof TestRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CustomizeRoute: CustomizeRoute,
  ResultRoute: ResultRoute,
  SelectionRoute: SelectionRoute,
  TestRoute: TestRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/customize",
        "/result",
        "/selection",
        "/test"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/customize": {
      "filePath": "customize.tsx"
    },
    "/result": {
      "filePath": "result.tsx"
    },
    "/selection": {
      "filePath": "selection.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
